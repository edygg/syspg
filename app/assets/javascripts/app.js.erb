app = angular.module('SyspgApp', ['ngMaterial', 'ui.router', 'ng-token-auth', 'ngMessages', 'ngMaterialDatePicker']);

app.config(['$stateProvider', '$urlRouterProvider', '$mdThemingProvider', '$authProvider', function($stateProvider, $urlRouterProvider, $mdThemingProvider, $authProvider) {
  /* Router Paths */
  // Home
  $urlRouterProvider.otherwise('/');

  $stateProvider
    .state('home', {
      url: '/',
      templateUrl: "<%= asset_path('home/index.html') %>",
      controller: "HomeController",
      controllerAs: "homeCtrl"
    })
    .state('professional_practices',{
      url: '/professional_practices',
      templateUrl: "<%= asset_path('home/professional_practices.html') %>",
      controller: "ProfessionalPracticeSearchController",
      controllerAs: "searchCtrl"
    })
    .state('graduation_projects',{
      url: '/graduation_projects',
      templateUrl: "<%= asset_path('home/graduation_projects.html') %>",
      controller: "GraduationProjectSearchController",
      controllerAs: "searchCtrl"
    })
    .state('unverified', {
      url: '/unverified',
      templateUrl: "<%= asset_path('home/unverified.html') %>",
    })
    .state('faqs', {
      url: '/faqs',
      templateUrl: "<%= asset_path('home/faqs.html') %>",
      controller: 'ShowFaqsController',
      controllerAs: 'showFaqsCtrl'
    })
    .state('user', {
      url: '/users',
      template: '<ui-view/>',
      abstract: true,
      controller: function($state, $user) {
        if ($user.isUserSignedIn()) {
          $state.go('home');
        }
      },
    })
    .state('user.password_reset', {
      url: '/password_reset',
      templateUrl: "<%= asset_path('users/password_reset.html') %>",
      controller: "PasswordResetController",
      controllerAs: "passwordResetCtrl"
    })
    .state('user.sign_in', {
      url: '/sign_in',
      templateUrl: "<%= asset_path('users/sign_in.html') %>",
      controller: "SignInController",
      controllerAs: "signInCtrl"
    })
    .state('user.sign_up_choice', {
      url: '/sign_up_choice',
      templateUrl: "<%= asset_path('users/sign_up_choice.html') %>"
    })
    .state('user.company_sign_up', {
      url: '/company_sign_up',
      templateUrl: "<%= asset_path('users/company_sign_up.html') %>",
      controller: "CompanySignUpController",
      controllerAs: 'companySignUpCtrl'
    })
    .state('user.student_sign_up', {
      url: '/student_sign_up',
      templateUrl: "<%= asset_path('users/student_sign_up.html') %>",
      controller: 'StudentSignUpController',
      controllerAs: 'studentSignUpCtrl'
    })
    .state('user.academy_sign_up', {
      url: '/academy_sign_up',
      templateUrl: "<%= asset_path('users/academy_sign_up.html') %>",
      controller: 'AcademySignUpController',
      controllerAs: 'academySignUpCtrl'
    })
    .state('academy', {
      url: '/academies',
      templateUrl: "<%= asset_path('academies/index.html') %>",
      abstract: true,
      controller: function($state, $user) {
        this.isAcademicChef = $user.isAcademicChef();
      },
      controllerAs: 'academyCtrl'
    })
    .state('academy.dashboard', {
      url: '/dashboard',
      templateUrl: "<%= asset_path('academies/dashboard.html') %>",
      controller: 'AcademyDashboardController',
      controllerAs: 'academyDashboardCtrl'
    })
    .state('academy.general_settings', {
      url: '/general_settings',
      templateUrl: "<%= asset_path('academies/general_settings.html') %>",
      controller: "GeneralSettingsController",
      controllerAs: "generalSettingsCtrl",
    })
    .state('academy.faqs', {
      url: '/faqs',
      templateUrl: "<%= asset_path('academies/faqs.html') %>",
      controller: "ManageFaqsController",
      controllerAs: "manageFaqsCtrl",
    })
    .state('company', {
      url: '/companies',
      templateUrl: "<%= asset_path('companies/index.html') %>",
      abstract: true
    })
    .state('company.dashboard', {
      url: '/dashboard',
      templateUrl: "<%= asset_path('companies/dashboard.html') %>"
    })
    .state('company.publish', {
      url: '/publish',
      templateUrl: "<%= asset_path('companies/publish.html') %>",
      controller: "PublishController",
      controllerAs: "publishCtrl"
    })
    .state('student', {
      url: '/students',
      abstract: true,
      templateUrl: "<%= asset_path('students/index.html') %>"
    })
    .state('student.dashboard', {
      url: '/dashboard',
      templateUrl: "<%= asset_path('students/dashboard.html') %>"
    })
    .state('profile', {
      url: '/profiles',
      templateUrl: "<%= asset_path('profiles/profile.html') %>",
      abstract: true,
    })
    .state('profile.student', {
      url: '/student/{user_id:int}',
      templateUrl: "<%= asset_path('profiles/student.html') %>",
      controller: 'StudentProfileController',
      controllerAs: 'studentProfileCtrl'
    })
    .state('profile.academic', {
      url: '/academic/{user_id:int}',
      templateUrl: "<%= asset_path('profiles/academic.html') %>",
      controller: 'AcademicProfileController',
      controllerAs: 'academicProfileCtrl'
    })
    .state('profile.company', {
      url: '/company/{user_id:int}',
      templateUrl: "<%= asset_path('profiles/company.html') %>",
      controller: 'CompanyProfileController',
      controllerAs: 'companyProfileCtrl'
    })
    .state('details', {
      url: '/details',
      templateUrl: "<%= asset_path('details/details.html') %>",
      abstract: true,
    })
    .state('details.professional_practice', {
      url: '/professional_practice/{professional_practice_id:int}',
      templateUrl: "<%= asset_path('details/professional_practice.html') %>",
      controller: 'ProfessionalPracticeDetailsController',
      controllerAs: 'detailsCtrl',
    })
    .state('details.graduation_project', {
      url: '/graduation_project/{graduation_project_id:int}',
      templateUrl: "<%= asset_path('details/graduation_project.html') %>",
      controller: 'GraduationProjectDetailsController',
      controllerAs: 'detailsCtrl',
    });
  /* End Router Paths */

  /* Theme */
  $mdThemingProvider.theme('default')
    .primaryPalette('indigo')
    .accentPalette('red', {
      'default': '400'
    });
  /* End Theme */

  /* Token Auth */
  $authProvider.configure({
    apiUrl: 'http://syspg-153073.nitrousapp.com',
    confirmationSuccessUrl: 'http://syspg-153073.nitrousapp.com'
  });
  /* End Token Auth */
}]);

/* Run events */
app.run(function($rootScope){
  $rootScope.user = undefined;

  $rootScope.$on('auth:login-success', function(ev, user) {
      $rootScope.user = user;
  });

  $rootScope.$on('auth:validation-success', function(ev, user) {
      $rootScope.user = user;
  });

  $rootScope.$on('auth:session-expired', function(ev) {
    $rootScope.user = undefined;
  });

  $rootScope.$on('auth:logout-success', function(ev) {
    $rootScope.user = undefined;
  });
});
/* End Run events */

/* Controllers */
app.controller('HomeController', ['$scope', '$user', '$state', '$auth', function($scope, $user, $state, $auth) {
  $('.slider').slider({ indicators: false });
  this.homeData = {
    options: 30,
    usersRegistered: 100
  };

  $auth.validateUser()
    .then(function(response) {
      if ($user.isUserSignedIn() && !$user.wasVerified()) {
        $state.go('unverified');
      } else {
        if ($user.isCompany()) {
          $state.go('company.dashboard');
        } else if ($user.isStudent()) {
          $state.go('student.dashboard');
        } else if ($user.isAcademicChef() || $user.isAcademic()) {
          $state.go('academy.dashboard');
        }
      }
    })
}]);

app.controller('MainNavbarController', ['$user', '$state', '$auth', '$mdToast', function($user, $state, $auth, $mdToast) {
  this.isUserSignedIn = $user.isUserSignedIn();
  this.userInfo = $user.getUserInfo();
  this.openUserMenu = function($mdOpenMenu, ev) {
    $mdOpenMenu(ev);
  };
  this.signOutUser = function() {
    $auth.signOut()
      .then(function(response){
        $state.go('home');
        $mdToast.show($mdToast.simple().textContent("Hasta luego."));
      })
      .catch(function(response) {
        console.log(response);
      });
  };
}]);

app.controller('SignInController', ['$auth', '$state', '$mdToast', '$scope', '$user', function($auth, $state, $mdToast, $scope, $user) {
  this.user = {};

  this.submitLogin = function(user) {
    $auth.submitLogin(user)
      .then(function(response) {

        if (!(response.verified == "t")) {
          $state.go('unverified');
        } else {
          if (response.role == "student") {
            $state.go('student.dashboard');
          } else if (response.role == "company") {
            $state.go('company.dashboard');
          } else {
            $state.go('academy.dashboard');
          }
          $mdToast.show($mdToast.simple().textContent('Bienvenido.'));
        }
      })
      .catch(function(response) {
        $mdToast.show($mdToast.simple().textContent('Verifique su email y contraseña.'));
      });
  }
}]);

app.controller('CompanySignUpController',
               ['$auth', '$http', '$mdDialog', '$state', '$scope', function($auth, $http, $mdDialog, $state, $scope) {
  var self = this;
  this.newUser = {};
  this.companyInfo = {};
  this.companyCategoryList = [];

  this.submitRegistration = function(userInfo, companyInfo) {
    $auth.submitRegistration(userInfo)
      .then(function(response) {
        companyInfo.user_id = response.data.data.id
        $http.post('/companies.json', companyInfo)
          .then(function(response) {
            $mdDialog.show($mdDialog.alert({
              title: "Mensaje de confirmación",
              textContent: "Para confirmar tus datos hemos enviado un correo electrónico.",
              ok: 'Cerrar'
            })).finally(function(){
              $state.go('home');
            });
          }, function(errors) {
            console.log(errors);
          });
      })
      .catch(function(response) {
        console.log('Soy el error del registro');
        var errors = response.data.errors.full_messages;
        var errorString = errors.join("<br>");
        $mdDialog.show($mdDialog.alert({
          title: "Errores",
          textContent: errorString,
          ok: 'Entiendo'
        }));
      });
  };

  this.loadCompanyCategories = function() {
    return $http.get('/company_categories.json').then(function(response) {
      self.companyCategoryList = response.data;
    });
  };
}]);

app.controller('StudentSignUpController', ['$auth', '$http', '$mdDialog', '$state', '$scope', function($auth, $http, $mdDialog, $state, $scope) {
  var self = this;
  this.newUser = {};
  this.studentInfo = {};
  this.campusList = [];
  this.majors = [];

  this.loadCampus = function() {
    return $http.get('/campus.json').then(function(response){
      self.campusList = response.data;
    });
  };

  this.loadMajors = function() {
    return $http.get('/majors.json').then(function(response) {
      self.majors = response.data;
    });
  };

  this.submitRegistration = function(userInfo, studentInfo){
    $auth.submitRegistration(userInfo)
      .then(function(response) {
        studentInfo.user_id = response.data.data.id
        $http.post('/students.json', studentInfo)
          .then(function(response) {
            $mdDialog.show($mdDialog.alert({
              title: "Mensaje de confirmación",
              textContent: "Para confirmar tus datos hemos enviado un correo electrónico.",
              ok: 'Cerrar'
            })).finally(function(){
              $state.go('home');
            });
          }, function(errors) {
            console.log(errors);
          });
      })
      .catch(function(response) {
        console.log('Soy el error del registro');
        var errors = response.data.errors.full_messages;
        var errorString = errors.join("<br>");
        $mdDialog.show($mdDialog.alert({
          title: "Errores",
          textContent: errorString,
          ok: 'Entiendo'
        }));
      });
  };
}]);

app.controller('AcademySignUpController', ['$auth', '$http', '$mdDialog', '$state', '$scope', function($auth, $http, $mdDialog, $state, $scope) {
  var self = this;
  this.newUser = {};
  this.academyInfo = {};
  this.campusList = [];
  this.majors = [];

  this.loadCampus = function() {
    return $http.get('/campus.json').then(function(response){
      self.campusList = response.data;
    });
  };

  this.loadMajors = function() {
    return $http.get('/majors.json').then(function(response) {
      self.majors = response.data;
    });
  };

  this.submitRegistration = function(userInfo, academyInfo){
    $auth.submitRegistration(userInfo)
      .then(function(response) {
        academyInfo.user_id = response.data.data.id
        $http.post('/students.json', academyInfo)
          .then(function(response) {
            $mdDialog.show($mdDialog.alert({
              title: "Mensaje de confirmación",
              textContent: "Para confirmar tus datos hemos enviado un correo electrónico.",
              ok: 'Cerrar'
            })).finally(function(){
              $state.go('home');
            });
          }, function(errors) {
            console.log(errors);
          });
      })
      .catch(function(response) {
        console.log('Soy el error del registro');
        var errors = response.data.errors.full_messages;
        var errorString = errors.join("<br>");
        $mdDialog.show($mdDialog.alert({
          title: "Errores",
          textContent: errorString,
          ok: 'Entiendo'
        }));
      });
  };
}]);

app.controller('GeneralSettingsController', ['$http', '$mdToast', '$mdDialog', function($http, $mdToast, $mdDialog) {
  var self = this;
  this.faculties = [];
  this.campus = [];
  this.subjects = [];
  this.majors = [];
  this.quarters = [];

  this.refreshFaculties = function() {
    $http.get('/faculties.json')
      .then(function(response){
        self.faculties = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Error al cargar las facultades.'));
      });
  };

  this.refreshCampus = function() {
    $http.get('/campus.json')
      .then(function(response) {
        self.campus = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Error al cargar los campus.'));
      });
  };

  this.refreshSubjects = function() {
    $http.get('/subjects.json')
      .then(function(response) {
        self.subjects = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Error al cargar las asignaturas.'));
      });
  };

  this.refreshMajors = function() {
    $http.get('/majors.json')
      .then(function(response) {
        self.majors = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Error al cargar las carreras.'));
      });
  };

  this.refreshQuarters = function() {
    $http.get('/quarters.json')
      .then(function(response) {
        self.quarters = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Error al cargar los periodos académicos.'));
      });
  };

  this.deleteCampus = function(campusId) {
    $http.delete('/campus/' + campusId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Campus eliminado.'));
        self.refreshCampus();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.deleteFaculty = function(facultyId) {
    $http.delete('/faculties/' + facultyId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Facultad eliminada.'));
        self.refreshFaculties();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.deleteSubject = function(subjectId) {
    $http.delete('/subjects/' + subjectId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Asignatura eliminada.'));
        self.refreshSubjects();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.deleteMajor = function(majorId) {
    $http.delete('/majors/' + majorId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Carrera eliminada.'));
        self.refreshMajors();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.showCampusEditDialog = function(event, campusId) {
    $mdDialog.show({
      controller: 'CampusController',
      controllerAs: 'campusCtrl',
      templateUrl: "<%= asset_path('academies/campus_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        campusId: campusId
      }
    })
    .then(function(campus) {
      $http.put('/campus/' + campusId + '.json', campus)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Campus actualizado.'));
          self.refreshCampus();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showFacultyEditDialog = function(event, facultyId) {
    $mdDialog.show({
      controller: 'FacultyController',
      controllerAs: 'facultyCtrl',
      templateUrl: "<%= asset_path('academies/faculty_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        facultyId: facultyId
      }
    })
    .then(function(faculty) {
      $http.put('/faculties/' + facultyId + '.json', faculty)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Facultad actualizada.'));
          self.refreshFaculties();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showSubjectEditDialog = function(event, subjectId) {
    $mdDialog.show({
      controller: 'SubjectController',
      controllerAs: 'subjectCtrl',
      templateUrl: "<%= asset_path('academies/subject_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        subjectId: subjectId
      }
    })
    .then(function(subject) {
      $http.put('/subjects/' + subjectId + '.json', subject)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Asignatura actualizada.'));
          self.refreshSubjects();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showMajorEditDialog = function(event, majorId) {
    $mdDialog.show({
      controller: 'MajorController',
      controllerAs: 'majorCtrl',
      templateUrl: "<%= asset_path('academies/major_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        majorId: majorId
      }
    })
    .then(function(major) {
      $http.put('/majors/' + majorId + '.json', major)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Carrera actualizada.'));
          self.refreshMajors();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showCampusCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'CampusController',
      controllerAs: 'campusCtrl',
      templateUrl: "<%= asset_path('academies/campus_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        campusId: 0
      }
    })
    .then(function(campus) {
      $http.post('/campus.json', campus)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Campus creado.'));
          self.refreshCampus();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showFacultyCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'FacultyController',
      controllerAs: 'facultyCtrl',
      templateUrl: "<%= asset_path('academies/faculty_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        facultyId: 0
      }
    })
    .then(function(faculty) {
      $http.post('/faculties.json', faculty)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Facultad creada.'));
          self.refreshFaculties();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showSubjectCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'SubjectController',
      controllerAs: 'subjectCtrl',
      templateUrl: "<%= asset_path('academies/subject_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        subjectId: 0
      }
    })
    .then(function(subject) {
      $http.post('/subjects.json', subject)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Asignatura creada.'));
          self.refreshSubjects();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showMajorCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'MajorController',
      controllerAs: 'majorCtrl',
      templateUrl: "<%= asset_path('academies/major_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        majorId: 0
      }
    })
    .then(function(major) {
      $http.post('/majors.json', major)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Carrera creada.'));
          self.refreshMajors();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showQuarterCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'QuarterController',
      controllerAs: 'quarterCtrl',
      templateUrl: "<%= asset_path('academies/quarter_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        quarterId: 0
      }
    })
    .then(function(quarter) {
      $http.post('/quarters.json', quarter)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Periodo académico creado.'));
          self.refreshQuarters();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.refreshFaculties();
  this.refreshCampus();
  this.refreshSubjects();
  this.refreshMajors();
  this.refreshQuarters();
}]);

app.controller('CampusController', ['$http', 'campusId', '$mdDialog', function($http, campusId, $mdDialog) {
  var self = this;
  this.campus = {};
  this.edit = campusId != 0;

  this.loadCampus = function(campusId) {
    $http.get('/campus/' + campusId + '.json')
      .then(function(response) {
        self.campus = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (campusId != 0)
    this.loadCampus(campusId);

}]);

app.controller('FacultyController', ['$http', 'facultyId', '$mdDialog', function($http, facultyId, $mdDialog) {
  var self = this;
  this.faculty = {};
  this.edit = facultyId != 0;

  this.loadFaculty = function(facultyId) {
    $http.get('/faculties/' + facultyId + '.json')
      .then(function(response) {
        self.faculty = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (facultyId != 0)
    this.loadFaculty(facultyId);

}]);

app.controller('SubjectController', ['$http', 'subjectId', '$mdDialog', function($http, subjectId, $mdDialog) {
  var self = this;
  this.subject = {};
  this.edit = subjectId != 0;

  this.loadSubject = function(subjectId) {
    $http.get('/subjects/' + subjectId + '.json')
      .then(function(response) {
        self.subject = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (subjectId != 0)
    this.loadSubject(subjectId);

}]);

app.controller('MajorController', ['$http', 'majorId', '$mdDialog', function($http, majorId, $mdDialog) {
  var self = this;
  this.major = {};
  this.edit = majorId != 0;

  this.loadMajor = function(majorId) {
    $http.get('/majors/' + majorId + '.json')
      .then(function(response) {
        self.major = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (majorId != 0)
    this.loadMajor(majorId);

}]);

app.controller('QuarterController', ['$http', 'quarterId', '$mdDialog', function($http, quarterId, $mdDialog) {
  var self = this;
  this.quarter = {};
  this.periods = [1,2,4,5];
  this.years = [];
  for (var i = 2016; i < 2030; i++) this.years.push(i);
  this.edit = quarterId != 0;

  this.loadQuarter = function(quarterId) {
    $http.get('/quarters/' + quarterId + '.json')
      .then(function(response) {
        self.quarter = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (quarterId != 0)
    this.loadQuarter(quarterId);

}]);

app.controller('AcademyDashboardController', ['$http', '$user', '$mdToast', function($http, $user, $mdToast) {
  var self = this;
  this.unverified_users = {};

  this.loadUnverifiedUsers = function() {
    $user.getAcademicInfo()
      .then(function(academic) {
        $http.get('/user_management/unverified_users.json', { params: { campus_id: academic.campu_id, major_id: academic.major_id } })
          .then(function(response) {
            self.unverified_users = response.data;
          })
          .catch(function(errors) {
            $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
          });
      }, function(errors) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.verifyUser = function(user_id) {
    $http.put('/user_management/verify_user.json', { user_id: user_id })
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Usuario verificado'));
        self.loadUnverifiedUsers();
      })
  };

  this.loadUnverifiedUsers();
}]);

app.controller('StudentProfileController', ['$http', '$stateParams', '$mdToast', function($http, $stateParams, $mdToast) {
  var self = this;
  this.student = {};

  this.loadProfile = function() {
    $http.get('/user_management/get_profile_info.json', { params: { user_id: $stateParams.user_id } })
      .then(function(response) {
        self.student = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
      });
  };

  this.loadProfile();
}]);

app.controller('AcademicProfileController', ['$http', '$stateParams', '$mdToast', function($http, $stateParams, $mdToast) {
  var self = this;
  this.academic = {};

  this.loadProfile = function() {
    $http.get('/user_management/get_profile_info.json', { params: { user_id: $stateParams.user_id } })
      .then(function(response) {
        self.academic = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
      });
  };

  this.loadProfile();
}]);

app.controller('CompanyProfileController', ['$http', '$stateParams', '$mdToast', function($http, $stateParams, $mdToast) {
  var self = this;
  this.company = {};

  this.loadProfile = function() {
    $http.get('/user_management/get_profile_info.json', { params: { user_id: $stateParams.user_id } })
      .then(function(response) {
        self.company = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
      });
  };

  this.loadProfile();
}]);

app.controller('PublishController', ['$http', '$mdToast', '$user', '$mdDialog', function($http, $mdToast, $user, $mdDialog) {
  var self = this;
  this.professionalPractices = [];
  this.graduationProjects = [];

  this.loadProfessionalPractices = function() {
    $user.getCompanyInfo()
      .then(function(company) {
        $http.get('/professional_practices.json', { params: { company_id: company.id } })
          .then(function(response) {
            self.professionalPractices = response.data;
          })
          .catch(function(errors) {
            $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
          });
      }, function(error) {
          $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
      });
  };

  this.loadGraduationProjects = function() {
    $user.getCompanyInfo()
      .then(function(company) {
        $http.get('/graduation_projects.json', { params: { company_id: company.id } })
          .then(function(response) {
            self.graduationProjects = response.data;
          })
          .catch(function(error) {
            $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
          });
      }, function(error) {
        $mdToast.show($mdToast.simple().textConten('Ha ocurrido un error.'));
      });
  };

  this.deleteProfessionalPractice = function(professionalPracticeId) {
    $http.delete('/professional_practices/' + professionalPracticeId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Práctica profesional eliminada.'));
        self.loadProfessionalPractices();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.deleteGraduationProject = function(graduationProjectId) {
    $http.delete('/graduation_projects/' + graduationProjectId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Proyecto de Graduación eliminado.'));
        self.loadGraduationProjects();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.showProfessionalPracticeCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'ProfessionalPracticeController',
      controllerAs: 'professionalPracticeCtrl',
      templateUrl: "<%= asset_path('companies/professional_practice_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        professionalPracticeId: 0
      }
    })
    .then(function(professionalPractice) {
      $user.getCompanyInfo()
        .then(function(company) {
          professionalPractice.company_id = company.id;
          $http.post('/professional_practices.json', professionalPractice)
            .then(function(response) {
              $mdToast.show($mdToast.simple().textContent("Práctica profesional publicada."));
              self.loadProfessionalPractices();
            })
            .catch(function(error) {
              $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
            });
        }, function(error) {
          $mdToast.show($mdToast.simple().textContent("Ha ocurrido un error."));
        });
    });
  };

  this.showGraduationProjectCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'GraduationProjectController',
      controllerAs: 'graduationProjectCtrl',
      templateUrl: "<%= asset_path('companies/graduation_project_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        graduationProjectId: 0
      }
    })
    .then(function(graduationProject) {
      $user.getCompanyInfo()
        .then(function(company) {
          graduationProject.company_id = company.id;
          $http.post('/graduation_projects.json', graduationProject)
            .then(function(response) {
              $mdToast.show($mdToast.simple().textContent('Proyecto de graduación publicado.'));
              self.loadGraduationProjects();
            })
            .catch(function(error) {
              $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
            });
        }, function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showProfessionalPracticeEditDialog = function(event, professionalPracticeId) {
    $mdDialog.show({
      controller: 'ProfessionalPracticeController',
      controllerAs: 'professionalPracticeCtrl',
      templateUrl: "<%= asset_path('companies/professional_practice_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        professionalPracticeId: professionalPracticeId
      }
    })
    .then(function(professionalPractice) {
      $http.put('/professional_practices/' + professionalPracticeId + '.json', professionalPractice)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Cambios guardados.'));
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showGraduationProjectEditDialog = function(event, graduationProjectId) {
    $mdDialog.show({
      controller: 'GraduationProjectController',
      controllerAs: 'graduationProjectCtrl',
      templateUrl: "<%= asset_path('companies/graduation_project_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        graduationProjectId: graduationProjectId
      }
    })
    .then(function(graduationProject) {
      $http.put('/graduation_projects/' + graduationProjectId + '.json', graduationProject)
        .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Proyecto de graduación publicado.'));
        self.loadGraduationProjects();
      })
        .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
    });
  };

  this.loadProfessionalPractices();
  this.loadGraduationProjects();
}]);

app.controller('ProfessionalPracticeController', ['$http', 'professionalPracticeId', '$mdDialog', function($http, professionalPracticeId, $mdDialog) {
  var self = this;
  this.professionalPractice = { selected_majors: [] };
  this.edit = professionalPracticeId != 0;

  //chips variables
  this.selectedItem = null;
  this.searchText = null;
  this.majors = [];

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  this.loadProfessionalPractice = function(professionalPracticeId) {
    $http.get('/professional_practices/' + professionalPracticeId + '.json')
      .then(function(response) {
        self.professionalPractice = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.loadMajors = function() {
    $http.get('/majors.json')
      .then(function(response) {
        self.majors = response.data.map(function(major) { major._lowername = major.name.toLowerCase(); return major; });
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.querySearch = function(query) {
    var results = query ? self.majors.filter(self.createFilterFor(query)) : [];
    return results;
  };

  this.createFilterFor = function(query) {
    var lowercaseQuery = angular.lowercase(query);
    return function(major) {
      return major._lowername.indexOf(lowercaseQuery) === 0
    };
  };

  this.transformChip = function(chip) {
    console.log(chip);
    return chip;
  };

  if (professionalPracticeId != 0)
    this.loadProfessionalPractice(professionalPracticeId);

  this.loadMajors();

}]);

app.controller('GraduationProjectController', ['$http', 'graduationProjectId', '$mdDialog', function($http, graduationProjectId, $mdDialog) {
  var self = this;
  this.graduationProject = { selected_majors: [] };
  this.edit = graduationProjectId != 0;

  //chips variables
  this.selectedItem = null;
  this.searchText = null;
  this.majors = [];

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  this.loadGraduationProject = function(graduationProjectId) {
    $http.get('/graduation_projects/' + graduationProjectId + '.json')
      .then(function(response) {
        self.graduationProject = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.loadMajors = function() {
    $http.get('/majors.json')
      .then(function(response) {
        self.majors = response.data.map(function(major) { major._lowername = major.name.toLowerCase(); return major; });
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.querySearch = function(query) {
    var results = query ? self.majors.filter(self.createFilterFor(query)) : [];
    return results;
  };

  this.createFilterFor = function(query) {
    var lowercaseQuery = angular.lowercase(query);
    return function(major) {
      return major._lowername.indexOf(lowercaseQuery) === 0
    };
  };

  this.transformChip = function(chip) {
    return chip;
  };

  if (graduationProjectId != 0)
    this.loadGraduationProject(graduationProjectId);
  this.loadMajors();
}]);

app.controller('ProfessionalPracticeSearchController', ['$http', '$mdToast', '$user', '$scope', function($http, $mdToast, $user, $scope) {
  var self = this;
  this.searchTerms = { search_text: '', majors: [] };
  this.majors = [];
  this.professionalPractices = [];

  this.loadProfessionalPractices = function() {
    $http.get('/professional_practices/search.json')
      .then(function(response) {
        self.professionalPractices = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.search = function(value, index, array) {
    if (self.searchTerms.majors.length > 0) {
        for (var i = 0; i < self.searchTerms.majors.length; i++) {
          for (var j = 0; j < value.majors.length; j++) {
            if (self.searchTerms.majors[i].id == value.majors[j].id) {
              if (self.searchTerms.search_text.length > 0)
                return value.charge.indexOf(self.searchTerms.search_text) != -1;
              else
                return true;
            }
          }
        }
        return false;
    } else {
      if (self.searchTerms.search_text.length > 0)
        return value.charge.indexOf(self.searchTerms.search_text) != -1;
      else
        return true;
    }
  };

  // Chips variables
  this.selectedItem = null;
  this.searchText = null;
  this.majors = [];

  this.loadMajors = function() {
    $http.get('/majors.json')
      .then(function(response) {
        self.majors = response.data.map(function(major) { major._lowername = major.name.toLowerCase(); return major; });
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.querySearch = function(query) {
    var results = query ? self.majors.filter(self.createFilterFor(query)) : [];
    return results;
  };

  this.createFilterFor = function(query) {
    var lowercaseQuery = angular.lowercase(query);
    return function(major) {
      return major._lowername.indexOf(lowercaseQuery) === 0
    };
  };

  this.transformChip = function(chip) {
    return chip;
  };

  this.loadMajors();
  this.loadProfessionalPractices();
}]);

app.controller('GraduationProjectSearchController', ['$http', '$mdToast', '$user', '$scope', function($http, $mdToast, $user, $scope) {
  var self = this;
  this.searchTerms = { search_text: '', majors: [] };
  this.majors = [];
  this.graduationProjects = [];

  this.loadGraduationProjects = function() {
    $http.get('/graduation_projects/search.json')
      .then(function(response) {
        self.graduationProjects = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.search = function(value, index, array) {
    if (self.searchTerms.majors.length > 0) {
        for (var i = 0; i < self.searchTerms.majors.length; i++) {
          for (var j = 0; j < value.majors.length; j++) {
            if (self.searchTerms.majors[i].id == value.majors[j].id) {
              if (self.searchTerms.search_text.length > 0)
                return value.name.indexOf(self.searchTerms.search_text) != -1;
              else
                return true;
            }
          }
        }
        return false;
    } else {
      if (self.searchTerms.search_text.length > 0)
        return value.name.indexOf(self.searchTerms.search_text) != -1;
      else
        return true;
    }
  };

  // Chips variables
  this.selectedItem = null;
  this.searchText = null;
  this.majors = [];

  this.loadMajors = function() {
    $http.get('/majors.json')
      .then(function(response) {
        self.majors = response.data.map(function(major) { major._lowername = major.name.toLowerCase(); return major; });
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.querySearch = function(query) {
    var results = query ? self.majors.filter(self.createFilterFor(query)) : [];
    return results;
  };

  this.createFilterFor = function(query) {
    var lowercaseQuery = angular.lowercase(query);
    return function(major) {
      return major._lowername.indexOf(lowercaseQuery) === 0
    };
  };

  this.transformChip = function(chip) {
    return chip;
  };

  this.loadMajors();
  this.loadGraduationProjects();
}]);

app.controller('ManageFaqsController', ['$http', '$mdDialog', '$mdToast', function($http, $mdDialog, $mdToast) {
  var self = this;
  this.faqs = [];

  this.loadFaqs = function() {
    $http.get('/frequently_asked_questions.json')
      .then(function(response) {
        self.faqs = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error'));
      });
  };

  this.showFaqCreateDialog = function(event) {
    $mdDialog.show({
      controller: 'FaqsController',
      controllerAs: 'faqsCtrl',
      templateUrl: "<%= asset_path('academies/faqs_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        faqId: 0
      }
    })
    .then(function(faq) {
      $http.post('/frequently_asked_questions.json', faq)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Pregunta agregada.'));
          self.loadFaqs();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.showFaqEditDialog = function(event, faqId) {
    $mdDialog.show({
      controller: 'FaqsController',
      controllerAs: 'faqsCtrl',
      templateUrl: "<%= asset_path('academies/faqs_dialog.html') %>",
      parent: angular.element(document.body),
      targetEvent: event,
      clickOutsideToClose: true,
      locals: {
        faqId: faqId
      }
    })
    .then(function(faq) {
      $http.put('/frequently_asked_questions/'+ faqId + '.json', faq)
        .then(function(response) {
          $mdToast.show($mdToast.simple().textContent('Pregunta actualizada.'));
          self.loadFaqs();
        })
        .catch(function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    });
  };

  this.deleteFaq = function(faqId) {
    $http.delete('/frequently_asked_questions/' + faqId + '.json')
      .then(function(response) {
        $mdToast.show($mdToast.simple().textContent('Pregunta eliminada.'));
        self.loadFaqs();
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error'));
      });
  };

  this.loadFaqs();
}]);

app.controller('PasswordResetController', ['$http', '$mdToast', '$mdDialog', '$auth', '$state', function($http, $mdToast, $mdDialog, $auth) {
  var self = this;
  this.user = {};

  this.requestPasswordReset = function(user) {
    $auth.requestPasswordReset(user)
      .then(function(response) {
        console.log(response);
      })
      .catch(function(error) {
        console.log(error);
      });
  };
}]);

app.controller('FaqsController', ['$http', '$mdToast', '$mdDialog', 'faqId', function($http, $mdToast, $mdDialog, faqId) {
  var self = this;
  this.faq = {};
  this.edit = faqId != 0;

  this.loadFaq = function(faqId) {
    $http.get('/frequently_asked_questions/' + faqId + '.json')
      .then(function(response) {
        self.faq = response.data;
      })
      .catch(function(error) {
        self.cancel();
      });
  };

  this.cancel = function() {
    $mdDialog.cancel();
  };

  this.answer = function(answer) {
    $mdDialog.hide(answer);
  };

  if (faqId != 0 )
    this.loadFaq(faqId);

}]);

app.controller('ShowFaqsController', ['$http', '$mdToast', function($http, $mdToast) {
  var self = this;
  this.faqs = [];

  this.loadFaqs = function() {
    $http.get('/frequently_asked_questions.json')
      .then(function(response) {
        self.faqs = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.loadFaqs();

}]);

app.controller('ProfessionalPracticeDetailsController', ['$http', '$mdToast', '$stateParams', '$user', function($http, $mdToast, $stateParams, $user) {
  var self = this;

  this.professionalPractice = {};
  this.available = false;

  this.loadProfessionalPractice = function() {
    $http.get('/professional_practices/' + $stateParams.professional_practice_id + '.json')
      .then(function(response) {
        self.professionalPractice = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.loadStudentInfo = function() {
    if ($user.isUserSignedIn() && $user.isStudent()) {
      $user.getStudentInfo()
        .then(function(student) {
          self.available = student.available
        }, function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    } else {
      self.available = false;
    }
  };

  this.enrollStudent = function(practice_id) {
    $user.getStudentInfo()
      .then(function(student) {
        $http.post('/enrollments.json', { student_id: student.id, professional_practice_id: practice_id })
          .then(function(response) {
            $mdToast.show($mdToast.simple().textContent('Tu jefe de carrera está revisando la información.'));
            self.loadStudentInfo();
          })
          .catch(function(error) {
            $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
          });
      }, function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.loadProfessionalPractice();
  this.loadStudentInfo();
}]);

app.controller('GraduationProjectDetailsController', ['$http', '$mdToast', '$stateParams', '$user', function($http, $mdToast, $stateParams, $user) {
  var self = this;

  this.graduationProject = {};
  this.available = false;

  this.loadGraduationProject = function() {
    $http.get('/graduation_projects/' + $stateParams.graduation_project_id + '.json')
      .then(function(response) {
        self.graduationProject = response.data;
      })
      .catch(function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.loadStudentInfo = function() {
    if ($user.isUserSignedIn() && $user.isStudent()) {
      $user.getStudentInfo()
        .then(function(student) {
          self.available = student.available
        }, function(error) {
          $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
        });
    } else {
      self.available = false;
    }
  };

  this.enrollStudent = function(project_id) {
    $user.getStudentInfo()
      .then(function(student) {
        $http.post('/enrollments.json', { student_id: student.id, graduation_project_id: project_id })
          .then(function(response) {
            $mdToast.show($mdToast.simple().textContent('Tu jefe de carrera está revisando la información.'));
            self.loadStudentInfo();
          })
          .catch(function(error) {
            $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
          });
      }, function(error) {
        $mdToast.show($mdToast.simple().textContent('Ha ocurrido un error.'));
      });
  };

  this.loadGraduationProject();
  this.loadStudentInfo();
}]);

/* End Controllers */

/* Directives */
app.directive('mainNavbar', function() {
  return {
    restrict: 'E',
    templateUrl: "<%= asset_path('shared/navbar.html') %>",
    controller: "MainNavbarController",
    controllerAs: "mainNavbarCtrl"
  };
});
/* End Directives */

/* Services */
app.factory('$user', ['$rootScope', '$http', '$q', function($rootScope, $http, $q) {
  return {
    getUserInfo: function() {
      return $rootScope.user || {};
    },
    wasVerified: function() {
      return $rootScope.user.verified == "t";
    },
    isUserSignedIn: function() {
      return !($rootScope.user === undefined);
    },
    isCompany: function() {
      if ($rootScope.user) {
        if ($rootScope.user.role == "company")
          return true;
        else
          return false;
      } else {
        return false;
      }
    },
    isStudent: function() {
      if ($rootScope.user) {
        if ($rootScope.user.role == "student")
          return true;
        else
          return false;
      } else {
        return false;
      }
    },
    isAcademicChef: function() {
      if ($rootScope.user) {
        if ($rootScope.user.role == "academy_chef")
          return true;
        else
          return false;
      } else {
        return false;
      }
    },
    isAcademic: function() {
      if ($rootScope.user) {
        if ($rootScope.user.role == "academy")
          return true;
        else
          return false;
      } else {
        return false;
      }
    },
    getCompanyInfo: function() {
      return $q(function(resolve, reject){
        $http.get('/companies/company_belongs_to_user.json', { params: { user_id: $rootScope.user.id } })
          .then(function(response){
            resolve(response.data);
          })
          .catch(function(errors) {
            reject(errors);
          });
      });
    },
    getAcademicInfo: function() {
      return $q(function(resolve, reject) {
        $http.get('/academies/academy_belongs_to_user.json', { params: { user_id: $rootScope.user.id } })
          .then(function(response) {
            resolve(response.data);
          })
          .catch(function(errors) {
            reject(errors);
          });
      });
    },
    getStudentInfo: function() {
      return $q(function(resolve, reject) {
        $http.get('/students/student_belongs_to_user.json', { params: { user_id: $rootScope.user.id } })
          .then(function(response) {
            resolve(response.data);
          })
          .catch(function(errors) {
            reject(errors);
          });
      });
    },
  };
}]);

/* End Services */
